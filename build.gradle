plugins {
    id 'java'
    id 'idea'
    id 'war'
    // adding plugins here removes the need to declare them in buildscript {}
    id 'org.springframework.boot' version '2.3.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
}

group 'org.whocaniplaywith'
version '1.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

task printVersion {
    println rootProject.artifacts
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.projectlombok:lombok'

    // implementation 'mysql:mysql-connector-java'
    implementation 'org.xerial:sqlite-jdbc:3.30.1'
    implementation 'com.github.gwenn:sqlite-dialect:0.1.0'

    // HTML parser
    implementation 'org.jsoup:jsoup:1.13.1'

    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

    annotationProcessor 'org.projectlombok:lombok'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    testImplementation 'io.projectreactor:reactor-test'
}

def copyDbToBuildDir() {
    def warOutputDir = "${project.buildDir}/${project.libsDirName}"
    def dbName = 'whocaniplaywith.db'

    copy {
        from dbName
        into warOutputDir
    }

    println("Copied ${dbName} to ${warOutputDir}")
}

bootRun {
    // support passing -Dsystem.property=value to bootRun task
    systemProperties = System.properties
}

// WAR is needed because JAR doesn't include resources/public/
// Spring disables `war` task and replaces it with `bootWar`
bootWar {
    archiveBaseName = project.name
    archiveVersion = project.version

    doLast {
        copyDbToBuildDir()
    }
}

// Creates a JAR that can run by itself instead of a WAR that requires running in a Tomcat container
//bootJar {
//    archiveBaseName = project.name
//    archiveVersion = project.version
//}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
        }
    }
    test {
        java {
            srcDir 'src/test/java'
        }
    }
}

//Run specific test using `gradle test --tests <TestClassName, e.g. _11_>`
test {
    // use JUnit
    useJUnitPlatform()

    // Log if a test suite passed/failed
    testLogging {
        events "passed", "failed", "skipped"
    }

    // Silence 'Build failed, run with --stacktrace' messages
    ignoreFailures = true

    // Summarize results of each test suite (or test file if no suites specified)
    afterSuite { suite, result ->
        if (!suite.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
}

wrapper {
    gradleVersion = '6.5'
    distributionType = Wrapper.DistributionType.ALL
}
